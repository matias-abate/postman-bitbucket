openapi: 3.0.3
info:
  title: Demo API Usuarios y Tickets
  version: 1.0.0
  description: |
    API mínima para demo de integración Bitbucket ↔ Postman.
    Contiene endpoints para usuarios y tickets.
servers:
  - url: https://api.demo.com
paths:
  /health:
    get:
      summary: Healthcheck
      operationId: getHealth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
  
    post:
      summary: Crear usuario
      operationId: createUsuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsuarioCreate'
            examples:
              demo:
                value:
                  nombre: "Nuevo Usuario"
                  email: "nuevo@example.com"
      responses:
        '201':
          description: Usuario creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
  /usuarios/{id}:
    get:
      summary: Obtener usuario por id
      operationId: getUsuarioById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Usuario encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        '404':
          description: No encontrado
  /tickets:
    get:
      summary: Listar tickets
      operationId: listTickets
      responses:
        '200':
          description: Lista de tickets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ticket'
              examples:
                demo:
                  value:
                    - id: "t1"
                      titulo: "Error de login"
                      estado: "abierto"
                      usuarioId: "u1"
                    - id: "t2"
                      titulo: "No carga el dashboard"
                      estado: "en_progreso"
                      usuarioId: "u2"
  /tickets/{id}:
    get:
      summary: Obtener ticket por id
      operationId: getTicketById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ticket encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        '404':
          description: No encontrado
components:
  schemas:
    Usuario:
      type: object
      required: [id, nombre, email]
      properties:
        id:
          type: string
          example: "u1"
        nombre:
          type: string
          example: "Ana"
        email:
          type: string
          format: email
          example: "ana@example.com"
    UsuarioCreate:
      type: object
      required: [nombre, email]
      properties:
        nombre:
          type: string
          example: "Ana"
        email:
          type: string
          format: email
          example: "ana@example.com"
    Ticket:
      type: object
      required: [id, titulo, estado, usuarioId]
      properties:
        id:
          type: string
          example: "t1"
        titulo:
          type: string
          example: "Error de login"
        estado:
          type: string
          enum: [abierto, en_progreso, resuelto, cerrado]
          example: "abierto"
        usuarioId:
          type: string
          example: "u1"
